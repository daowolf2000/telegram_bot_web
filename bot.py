# main.py

import os
import asyncio
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
)
from telegram import BotCommand

from core.config import load_config
from core.logger import get_logger

from handlers.commands import send_menu
from handlers.menu_handler import menu_text_handler
from handlers.souvenirs import souvenirs_menu, souvenirs_menu_handler
from handlers.support import (
    ASKING_QUESTION,
    CANCEL_CALLBACK,
    start_support_conversation,
    receive_support_question,
    cancel_support,
    operator_reply_handler,
)
from handlers.materials import materials_menu, material_button_handler
from handlers.buttons import button_handler
from handlers.errors import error_handler
from handlers.webapp import webapp_data_handler
from handlers.events import show_events, event_callback_handler
from handlers.contacts import contacts_handler, contacts_category_handler, contacts_back_handler
from handlers.guide import guide_handler, guide_category_handler, guide_back_handler
from handlers.tours import show_tours, tour_callback_handler

from services.messages import load_message

from warnings import filterwarnings
from telegram.warnings import PTBUserWarning


filterwarnings(
    action="ignore",
    message=r".*CallbackQueryHandler",
    category=PTBUserWarning,
)


def ensure_dirs(config, logger):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, —Å–æ–∑–¥–∞–µ—Ç –∏—Ö –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏.

    Args:
        config (dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ø—É—Ç—è–º–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º.
        logger (logging.Logger): –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    """
    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    required_dirs = [
        config["orders_dir"],
        config["logs_dir"],
        config["materials_dir"],
    ]
    for directory in required_dirs:
        if not os.path.exists(directory):
            os.makedirs(directory)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
        else:
            logger.debug(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {directory}")


async def set_bot_commands(application, logger):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram.

    Args:
        application (telegram.ext.Application): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        logger (logging.Logger): –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    """
    commands = [
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("events", "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
        BotCommand("contacts", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"),
        BotCommand("tours", "–≠–∫—Å–∫—É—Ä—Å–∏–∏"),
        BotCommand("souvenirs", "–°—É–≤–µ–Ω–∏—Ä—ã"),
        BotCommand("materials", "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"),
        BotCommand("guide", "–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å"),
        BotCommand("support", "–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"),
    ]
    await application.bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–≥–µ—Ä.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    - –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    - –ó–∞–ø—É—Å–∫–∞–µ—Ç polling –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
    """
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    config = load_config()

    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞...")
    log_file_path = os.path.join(config["logs_dir"], config["log_file"])
    logger = get_logger(log_file_path)

    logger.info("=== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===")

    token = config.get("telegram_token")
    if not token:
        logger.error("telegram_token –Ω–µ —É–∫–∞–∑–∞–Ω –≤ config.yaml. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        exit(1)
    logger.info("–¢–æ–∫–µ–Ω Telegram –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    application = ApplicationBuilder().token(token).build()
    application.bot_data["config"] = config
    application.bot_data["logger"] = logger

    ensure_dirs(config, logger)

    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

    async def start_handler(update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        """
        config = context.application.bot_data.get("config", {})
        welcome_text = load_message("welcome.txt") or config.get(
            "welcome_text", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
        )

        await update.message.reply_text(welcome_text)
        await send_menu(update, context)
        context.user_data.pop("current_menu", None)

    application.add_handler(CommandHandler("start", start_handler))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    main_commands = [
        ("events", show_events),
        ("contacts", contacts_handler),
        ("tours", show_tours),
        ("souvenirs", souvenirs_menu),
        ("materials", materials_menu),
        ("guide", guide_handler),
        ("support", start_support_conversation),
    ]

    for cmd, handler in main_commands:
        application.add_handler(CommandHandler(cmd, handler))

    # --- ConversationHandler –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ---
    support_conversation_handler = ConversationHandler(
        entry_points=[
            MessageHandler(
                filters.Regex("^üë®üíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º$"), start_support_conversation
            )
        ],
        states={
            ASKING_QUESTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_support_question),
                CallbackQueryHandler(cancel_support, pattern=f"^{CANCEL_CALLBACK}$"),
            ],
        },
        fallbacks=[CallbackQueryHandler(cancel_support, pattern=f"^{CANCEL_CALLBACK}$")],
        allow_reentry=True,
    )
    application.add_handler(support_conversation_handler)

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ ---
    operators_chat_id = config.get("operators_chat_id")
    if operators_chat_id:
        application.add_handler(
            MessageHandler(
                filters.Chat(operators_chat_id) & filters.REPLY & filters.TEXT,
                operator_reply_handler,
            )
        )

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –∏ –∫–Ω–æ–ø–æ–∫ ---
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_text_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query –¥–ª—è —Ç—É—Ä–æ–≤
    application.add_handler(
        CallbackQueryHandler(
            tour_callback_handler, pattern=r"^(date|register|unregister|back_to_dates)\|?"
        )
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Å—É–≤–µ–Ω–∏—Ä–æ–≤
    application.add_handler(CommandHandler("material", materials_menu))
    application.add_handler(CommandHandler("myorder", souvenirs_menu_handler))
    application.add_handler(CommandHandler("cancelorder", souvenirs_menu_handler))

    application.add_handler(MessageHandler(filters.Regex("^üõç –°—É–≤–µ–Ω–∏—Ä—ã$"), souvenirs_menu))
    application.add_handler(
        MessageHandler(
            filters.Regex("^(–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑|–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑|–ù–∞–∑–∞–¥)$"), souvenirs_menu_handler
        )
    )

    application.add_handler(MessageHandler(filters.Regex("^üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã$"), materials_menu))
    application.add_handler(CallbackQueryHandler(material_button_handler, pattern=r"^material_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
    application.add_handler(MessageHandler(filters.Regex("^üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è$"), show_events))
    application.add_handler(CallbackQueryHandler(event_callback_handler, pattern=r"^event_date\|"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è
    application.add_handler(CallbackQueryHandler(guide_category_handler, pattern=r"^guide_cat\|"))
    application.add_handler(CallbackQueryHandler(guide_back_handler, pattern=r"^guide_back$"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    application.add_handler(MessageHandler(filters.Regex("^üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã$"), contacts_handler))
    application.add_handler(CallbackQueryHandler(contacts_category_handler, pattern=r"^contacts_cat\|"))
    application.add_handler(CallbackQueryHandler(contacts_back_handler, pattern=r"^contacts_back$"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, webapp_data_handler))

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∑–∞–ø—É—Å–∫ polling...")

    loop = asyncio.get_event_loop()
    loop.run_until_complete(set_bot_commands(application, logger))
    loop.run_until_complete(application.run_polling())

    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    main()
