#!/usr/bin/env python3

import os
import yaml
import json
import signal
import subprocess
import threading
import http.server
import socketserver
import re
import csv
import urllib.parse
from functools import partial

CONFIG_FILE = "config.yaml"
PRODUCTS_FILE = "products.yaml"
WEBAPP_DIR = "webapp"
WEBAPP_PORT = 8080
ORDERS_DIR = "orders"


def load_config():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML-—Ñ–∞–π–ª–∞.

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π.
    """
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            return yaml.safe_load(f)
    return {"telegram_token": "", "webapp_url": "", "admin_chat_id": 0}


def save_config(config):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ YAML-—Ñ–∞–π–ª.

    Args:
        config (dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    """
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        yaml.dump(config, f)
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {CONFIG_FILE}")


class WebAppRequestHandler(http.server.SimpleHTTPRequestHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ /get_order –∏ –æ—Ç–¥–∞—ë—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    def do_GET(self):
        parsed_path = urllib.parse.urlparse(self.path)
        if parsed_path.path == "/get_order":
            query = urllib.parse.parse_qs(parsed_path.query)
            user_id = query.get("user_id", [None])[0]
            if user_id:
                order_file = os.path.join(ORDERS_DIR, f"{user_id}.csv")
                if os.path.exists(order_file):
                    self.send_response(200)
                    self.send_header("Content-type", "application/json")
                    self.end_headers()
                    with open(order_file, encoding="utf-8") as f:
                        reader = csv.DictReader(f)
                        items = list(reader)
                    if items:
                        response = {
                            "items": [
                                {
                                    "id": int(i["item_id"]),
                                    "name": i["name"],
                                    "unit": i["unit"],
                                    "qty": int(i["qty"]),
                                }
                                for i in items
                            ],
                            "fio": items[0].get("fio", ""),
                            "packaging": items[0].get("packaging", ""),
                        }
                    else:
                        response = {}
                    self.wfile.write(json.dumps(response).encode())
                    return
                else:
                    self.send_response(404)
                    self.end_headers()
                    return
        super().do_GET()


def start_web_server():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    Returns:
        socketserver.TCPServer: –ó–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä.
    """
    handler = partial(WebAppRequestHandler, directory=WEBAPP_DIR)
    httpd = socketserver.TCPServer(("", WEBAPP_PORT), handler)
    print(f"‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –ø–∞–ø–∫—É {WEBAPP_DIR} –Ω–∞ http://localhost:{WEBAPP_PORT}")

    server_thread = threading.Thread(target=httpd.serve_forever, daemon=True)
    server_thread.start()

    return httpd


def start_cloudpub(port):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç—É–Ω–Ω–µ–ª—å CloudPub –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É.

    Args:
        port (int): –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç—å.

    Returns:
        tuple: (url –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞, –ø—Ä–æ—Ü–µ—Å—Å CloudPub) –∏–ª–∏ (None, None) –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º CloudPub —Ç—É–Ω–Ω–µ–ª—å –Ω–∞ –ø–æ—Ä—Ç {port}...")
    proc = subprocess.Popen(
        ["clo", "publish", "http", str(port)],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        bufsize=1,
        universal_newlines=True,
    )

    url = None
    for line in proc.stdout:
        print(f"[cloudpub] {line.strip()}")
        match = re.search(r"https://[^\s]+", line)
        if match:
            url = match.group(0)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π URL CloudPub: {url}")
            break

    if not url:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL –∏–∑ –≤—ã–≤–æ–¥–∞ CloudPub.")
        proc.terminate()
        return None, None

    return url, proc


def start_telegram_bot(token):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å.

    Args:
        token (str): –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞.

    Returns:
        subprocess.Popen –∏–ª–∏ None: –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    try:
        bot_process = subprocess.Popen(
            ["python", "bot.py"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
        )
        print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        return bot_process
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        return None


def cleanup(processes):
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.

    Args:
        processes (dict): –°–ª–æ–≤–∞—Ä—å —Å –∏–º–µ–Ω–∞–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ subprocess –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤.
    """
    for name, process in processes.items():
        if process:
            try:
                if name == "web_server":
                    process.shutdown()
                else:
                    process.terminate()
                print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception:
                pass


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
    - –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä.
    - –ó–∞–ø—É—Å–∫–∞–µ—Ç CloudPub —Ç—É–Ω–Ω–µ–ª—å.
    - –ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞.
    - –û–∂–∏–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã.
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ Telegram-–±–æ—Ç–∞ —Å Web App (CloudPub)")

    config = load_config()
    os.makedirs(ORDERS_DIR, exist_ok=True)

    web_server = start_web_server()

    cloudpub_url, cloudpub_proc = start_cloudpub(WEBAPP_PORT)
    if not cloudpub_url:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å CloudPub —Ç—É–Ω–Ω–µ–ª—å, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞.")
        cleanup({"web_server": web_server})
        return

    config["webapp_url"] = cloudpub_url.rstrip("/") + "/index.html"
    save_config(config)

    if not config.get("telegram_token"):
        token = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞: ")
        config["telegram_token"] = token
        save_config(config)

    bot_process = start_telegram_bot(config["telegram_token"])

    print("\n‚ú® –í—Å—ë –≥–æ—Ç–æ–≤–æ! ‚ú®")
    print(f"üì± Telegram Web App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {config['webapp_url']}")
    print("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")

    try:
        signal.pause()
    except (KeyboardInterrupt, SystemExit):
        print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        cleanup(
            {
                "web_server": web_server,
                "cloudpub": cloudpub_proc,
                "bot": bot_process,
            }
        )
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")


if __name__ == "__main__":
    main()
