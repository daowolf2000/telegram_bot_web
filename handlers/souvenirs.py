# souvenirs.py

from telegram import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from telegram.ext import ContextTypes
from services.messages import load_message
from services.orders import read_order


def get_souvenirs_menu(webapp_url: str, has_order: bool) -> ReplyKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é —Å—É–≤–µ–Ω–∏—Ä–æ–≤.

    Args:
        webapp_url (str): URL WebApp –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
        has_order (bool): –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞.

    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.
    """
    keyboard = [
        [KeyboardButton(text="–°–¥–µ–ª–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑", web_app=WebAppInfo(url=webapp_url))]
    ]
    if has_order:
        keyboard.append(["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑", "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"])
    keyboard.append(["–ù–∞–∑–∞–¥"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def souvenirs_menu(update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —Å—É–≤–µ–Ω–∏—Ä–æ–≤.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–≤–µ–Ω–∏—Ä–∞—Ö –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏.

    Args:
        update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    """
    user = update.effective_user
    config = context.application.bot_data["config"]
    logger = context.application.bot_data["logger"]

    info_text = load_message("souvenirs.txt")
    if not info_text:
        info_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É–≤–µ–Ω–∏—Ä–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    await update.message.reply_text(info_text)

    try:
        order = read_order(user.id, config["orders_dir"])
        has_order = bool(order)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        has_order = False

    keyboard = get_souvenirs_menu(config["webapp_url"], has_order)
    await update.message.reply_text("–ú–µ–Ω—é —Å—É–≤–µ–Ω–∏—Ä–æ–≤:", reply_markup=keyboard)


async def souvenirs_menu_handler(update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω—é —Å—É–≤–µ–Ω–∏—Ä–æ–≤.

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞, –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    """
    text = update.message.text
    config = context.application.bot_data["config"]
    user = update.effective_user
    logger = context.application.bot_data["logger"]

    async def update_keyboard():
        try:
            order = read_order(user.id, config["orders_dir"])
            has_order = bool(order)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            has_order = False

        keyboard = get_souvenirs_menu(config["webapp_url"], has_order)
        await update.message.reply_text("–ú–µ–Ω—é —Å—É–≤–µ–Ω–∏—Ä–æ–≤:", reply_markup=keyboard)

    if text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑":
        try:
            order = read_order(user.id, config["orders_dir"])
            if not order:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.")
                await update_keyboard()
                return

            total_sum = 0
            lines = []
            for row in order:
                try:
                    qty = int(row["qty"])
                    price = float(row.get("price", 0))
                except (ValueError, TypeError):
                    qty = 0
                    price = 0.0
                name = row["name"]
                unit = row["unit"]
                lines.append(f"{name} ‚Äî {qty} {unit} √ó {price} ‚ÇΩ = {qty * price} ‚ÇΩ")
                total_sum += qty * price

            text = "–í–∞—à —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑:\n" + "\n".join(lines)
            text += f"\n\nüí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_sum} ‚ÇΩ"
            await update.message.reply_text(text)
            await update_keyboard()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await update_keyboard()

    elif text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        from services.orders import remove_order

        if remove_order(user.id, config["orders_dir"], logger):
            await update.message.reply_text("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await update_keyboard()

    elif text == "–ù–∞–∑–∞–¥":
        from handlers.commands import send_menu

        context.user_data.pop("current_menu", None)
        await send_menu(update, context)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.")
