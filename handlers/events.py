import json
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from collections import defaultdict

EVENTS_FILE = "data/events.json"


def load_events() -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ JSON-—Ñ–∞–π–ª–∞.

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –ø–æ –¥–∞—Ç–∞–º.
              –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    if not os.path.exists(EVENTS_FILE):
        return {}
    with open(EVENTS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


def group_events_by_date(events_data: dict) -> dict:
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –¥–∞—Ç–µ.

    Args:
        events_data (dict): –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –ø–æ –¥–∞—Ç–∞–º.

    Returns:
        dict: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞—Ç–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.
    """
    grouped = defaultdict(list)
    for date, events in events_data.items():
        grouped[date].extend(events)
    return dict(sorted(grouped.items()))


def build_dates_keyboard(dates: list) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.

    Args:
        dates (list): –°–ø–∏—Å–æ–∫ –¥–∞—Ç.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–∞—Ç.
    """
    keyboard = [
        [InlineKeyboardButton(f"üìÖ {date}", callback_data=f"event_date|{date}")]
        for date in dates
    ]
    return InlineKeyboardMarkup(keyboard)


def format_events_text(events: list, date: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.

    Args:
        events (list): –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.
        date (str): –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏.
    """
    lines = [f"üìÖ *{date}*\n"]
    for event in events:
        time_str = event.get("time", "")
        if "end_time" in event:
            time_str += f" - {event['end_time']}"
        title = event.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        desc = event.get("description", "")
        lines.append(f"üïí {time_str} *{title}*")
        if desc:
            lines.append(f"_{desc}_")
        lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
    return "\n".join(lines)


async def show_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /events ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏.

    Args:
        update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    """
    events_data = load_events()
    if not events_data:
        await update.message.reply_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    grouped_events = group_events_by_date(events_data)
    dates = list(grouped_events.keys())

    context.user_data["events_grouped"] = grouped_events
    context.user_data["events_dates"] = dates

    keyboard = build_dates_keyboard(dates)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=keyboard)


async def event_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º.

    Args:
        update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    """
    query = update.callback_query
    data = query.data

    grouped_events = context.user_data.get("events_grouped")
    dates = context.user_data.get("events_dates")

    if not grouped_events or not dates:
        await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–Ω–æ–≤–æ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /events")
        return

    if data.startswith("event_date|"):
        date = data.split("|", 1)[1]
        events = grouped_events.get(date, [])

        if not events:
            await query.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç.")
            return

        text = format_events_text(events, date)
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", callback_data="event_back")]]
        )

        await query.edit_message_text(text=text, parse_mode="Markdown", reply_markup=keyboard)
        await query.answer()

    elif data == "event_back":
        keyboard = build_dates_keyboard(dates)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=keyboard)
        await query.answer()

    else:
        await query.answer()
