# handlers/tours.py

import os
import re
import aiohttp
from collections import defaultdict
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.tours import load_tours
from services.registrations import get_user_registrations, save_user_registrations


def group_tours_by_date(tours):
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤ –ø–æ –¥–∞—Ç–µ.

    Args:
        tours (list): –°–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤ (—Å–ª–æ–≤–∞—Ä–µ–π).

    Returns:
        dict: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ ‚Äî –¥–∞—Ç–∞–º–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ ‚Äî —Å–ø–∏—Å–∫–∞–º–∏ —Ç—É—Ä–æ–≤.
    """
    grouped = defaultdict(list)
    for tour in tours:
        grouped[tour["date"]].append(tour)
    return dict(sorted(grouped.items()))


def is_valid_image_url(url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –¥–æ–ø—É—Å—Ç–∏–º–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

    Args:
        url (str): URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.

    Returns:
        bool: True, –µ—Å–ª–∏ URL –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏–Ω–∞—á–µ False.
    """
    if not url or not isinstance(url, str):
        return False
    return bool(re.search(r"\.(jpg|jpeg|png|gif|bmp|webp)$", url, re.IGNORECASE))


async def url_exists(url: str) -> bool:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL (HEAD –∑–∞–ø—Ä–æ—Å).

    Args:
        url (str): –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π URL.

    Returns:
        bool: True, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ 200, –∏–Ω–∞—á–µ False.
    """
    try:
        async with aiohttp.ClientSession() as session:
            async with session.head(url, timeout=5) as resp:
                return resp.status == 200
    except Exception:
        return False


async def send_tour_message(
    update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str,
    image_url: str,
    keyboard: InlineKeyboardMarkup,
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç—É—Ä–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ).

    Args:
        update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
        text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        image_url (str): –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        keyboard (InlineKeyboardMarkup): –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    logger = context.application.bot_data["logger"]

    if image_url and os.path.isfile(image_url):
        try:
            with open(image_url, "rb") as photo_file:
                await update.message.reply_photo(
                    photo=photo_file,
                    caption=text,
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                )
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    if image_url and is_valid_image_url(image_url):
        if await url_exists(image_url):
            try:
                await update.message.reply_photo(
                    photo=image_url,
                    caption=text,
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                )
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL: {e}")

    await update.message.reply_text(text, parse_mode="Markdown", reply_markup=keyboard)


def build_dates_keyboard(dates):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç —Ç—É—Ä–æ–≤.

    Args:
        dates (list): –°–ø–∏—Å–æ–∫ –¥–∞—Ç (—Å—Ç—Ä–æ–∫).

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–∞—Ç.
    """
    keyboard = [[InlineKeyboardButton(date, callback_data=f"date|{date}")] for date in dates]
    return InlineKeyboardMarkup(keyboard)


def build_tours_keyboard(user_regs, tours):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç—É—Ä–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É,
    —É—á–∏—Ç—ã–≤–∞—è —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user_regs (set): –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID —Ç—É—Ä–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞–Ω.
        tours (list): –°–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤ –Ω–∞ –¥–∞—Ç—É.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç—É—Ä–æ–≤ –∏ –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥.
    """
    keyboard = []
    for tour in tours:
        if tour["id"] in user_regs:
            text = f"‚úÖ {tour['time']} - {tour['name']}"
            callback_data = f"unregister|{tour['id']}"
        else:
            text = f"‚ùå {tour['time']} - {tour['name']}"
            callback_data = f"register|{tour['id']}"
        keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", callback_data="back_to_dates")])
    return InlineKeyboardMarkup(keyboard)


async def show_tours(update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tours ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç —Å —Ç—É—Ä–∞–º–∏.

    Args:
        update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    """
    tours = load_tours()
    if not tours:
        await update.message.reply_text("–¢—É—Ä—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    grouped = group_tours_by_date(tours)
    dates = list(grouped.keys())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    context.user_data["tours_grouped"] = grouped
    context.user_data["tours_dates"] = dates

    keyboard = build_dates_keyboard(dates)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ç—É—Ä–∞:", reply_markup=keyboard)


async def tour_callback_handler(update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ç—É—Ä–∞.

    Args:
        update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram.
        context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
    """
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    user_regs = get_user_registrations(user_id)
    grouped = context.user_data.get("tours_grouped", {})
    dates = context.user_data.get("tours_dates", [])

    if data.startswith("date|"):
        selected_date = data.split("|", 1)[1]
        tours_on_date = grouped.get(selected_date, [])

        if not tours_on_date:
            await query.answer("–¢—É—Ä–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç.")
            return

        text = f"–¢—É—Ä—ã –Ω–∞ {selected_date}:\n"
        for tr in tours_on_date:
            start = tr.get("time", "")
            end = tr.get("end_time", "")
            time_period = f"{start} - {end}" if end else start
            text += (
                f"\nüïí {time_period}\n*{tr['name']}*\n_{tr['description']}_\n"
                f"üí∞ –¶–µ–Ω–∞: {tr['price']} ‚ÇΩ"
            )
            if tr.get("link"):
                text += f"\nüîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({tr['link']})"
            text += "\n"

        kb = build_tours_keyboard(user_regs, tours_on_date)

        await query.edit_message_text(text=text, parse_mode="Markdown", reply_markup=kb)
        await query.answer()

    elif data == "back_to_dates":
        keyboard = build_dates_keyboard(dates)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ç—É—Ä–∞:", reply_markup=keyboard)
        await query.answer()

    elif data.startswith("register|") or data.startswith("unregister|"):
        action, tour_id = data.split("|", 1)

        if action == "register":
            user_regs.add(tour_id)
            await query.answer("–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç—É—Ä")
        else:
            user_regs.discard(tour_id)
            await query.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç—É—Ä–∞")

        save_user_registrations(user_id, user_regs)

        # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É —Ç—É—Ä–∞ –ø–æ ID
        tour_date = None
        for date_key, tours_list in grouped.items():
            if any(t["id"] == tour_id for t in tours_list):
                tour_date = date_key
                break

        if not tour_date:
            keyboard = build_dates_keyboard(dates)
            await query.edit_message_reply_markup(reply_markup=keyboard)
            return

        tours_on_date = grouped.get(tour_date, [])
        kb = build_tours_keyboard(user_regs, tours_on_date)
        await query.edit_message_reply_markup(reply_markup=kb)

    else:
        await query.answer()  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ—á–∏—Ö callback_data
